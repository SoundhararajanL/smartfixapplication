[{"D:\\smartfix project\\smartfixapplication\\src\\index.js":"1","D:\\smartfix project\\smartfixapplication\\src\\App.js":"2","D:\\smartfix project\\smartfixapplication\\src\\login.js":"3","D:\\smartfix project\\smartfixapplication\\src\\signup.js":"4","D:\\smartfix project\\smartfixapplication\\src\\reportWebVitals.js":"5","D:\\smartfix project\\smartfixapplication\\src\\home.js":"6","D:\\smartfix project\\smartfixapplication\\src\\display.js":"7","D:\\smartfix project\\smartfixapplication\\src\\form.js":"8","D:\\smartfix project\\smartfixapplication\\src\\formData.js":"9","D:\\smartfix project\\smartfixapplication\\src\\random.js":"10","D:\\smartfix project\\smartfixapplication\\src\\chart.js":"11"},{"size":1049,"mtime":1689830478517,"results":"12","hashOfConfig":"13"},{"size":590,"mtime":1689758713578,"results":"14","hashOfConfig":"13"},{"size":4122,"mtime":1687233945113,"results":"15","hashOfConfig":"13"},{"size":5746,"mtime":1687233950351,"results":"16","hashOfConfig":"13"},{"size":375,"mtime":1687233950345,"results":"17","hashOfConfig":"13"},{"size":16439,"mtime":1687768040266,"results":"18","hashOfConfig":"13"},{"size":13533,"mtime":1688112287995,"results":"19","hashOfConfig":"13"},{"size":9421,"mtime":1689919945033,"results":"20","hashOfConfig":"13"},{"size":12904,"mtime":1689333861702,"results":"21","hashOfConfig":"13"},{"size":4884,"mtime":1689830400708,"results":"22","hashOfConfig":"13"},{"size":9485,"mtime":1690439761235,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xzmpom",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"31"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\smartfix project\\smartfixapplication\\src\\index.js",[],[],"D:\\smartfix project\\smartfixapplication\\src\\App.js",["64","65","66","67","68","69","70"],[],"import './App.css';\r\nimport Login from './login';\r\nimport Home from './home';\r\nimport FormPage from './form';\r\nimport TemplateList from './display';\r\nimport { Form } from 'react-router-dom';\r\nimport FormData from './formData'\r\nimport RandomFormGenerator from './random';\r\nimport ChartComponent from './chart';\r\nfunction App() {\r\n  return (\r\n   <div>\r\n     {/* <Login /> */}\r\n     {/* < Home /> */}\r\n     {/* <TemplateList /> */}\r\n     {/* <FormPage />  */}\r\n     {/* <FormData/> */}\r\n     {/* <RandomFormGenerator /> */}\r\n     <ChartComponent />\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default App;",[],"D:\\smartfix project\\smartfixapplication\\src\\login.js",["71","72","73","74","75"],[],"import React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport logo from './smartfix.png';\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport login from './login.png';\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n\r\n  const handleLogin = () => {\r\n    if (!username || !password) {\r\n      toast.error('Please fill in all the required fields.', { position: toast.POSITION.TOP_CENTER });\r\n      return;\r\n    }\r\n\r\n    const userData = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    axios\r\n      .post('http://localhost:3000/persons/login', userData)\r\n      .then((response) => {\r\n        const success = response.data.success;\r\n\r\n        if (success) {\r\n          toast.success('Login successful!', {\r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 500,\r\n            onClose: () => {\r\n              navigate('/home', { state: { loginSuccess: true } });\r\n            }\r\n          });\r\n        } else {\r\n          toast.error('Invalid username or password', { position: toast.POSITION.TOP_CENTER });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        toast.error('Invalid username or password', { position: toast.POSITION.TOP_CENTER });\r\n      });\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div>\r\n\r\n\r\n        <section class=\"vh-100\">\r\n          <div class=\"container-fluid h-custom\">\r\n            <div class=\"row d-flex justify-content-center align-items-center h-100\">\r\n              <div class=\"col-md-9 col-lg-6 col-xl-5\">\r\n                <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp\"\r\n                  class=\"img-fluid\" alt=\"Sample image\" />\r\n              </div>\r\n              <div class=\"col-md-8 col-lg-6 col-xl-4 offset-xl-1\">\r\n                <form>\r\n                 \r\n                  <div class=\"divider d-flex align-items-center my-4\">\r\n                  <label class=\"form-label\" for=\"form3Example3\">LOGIN</label>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"form-outline mb-4\">\r\n                  <label class=\"form-label\" for=\"form3Example3\">Username</label>\r\n                    <input type=\"email\" id=\"form3Example3\" class=\"form-control form-control-lg\"\r\n                      onChange={(e) => setUsername(e.target.value.trim())}\r\n                      placeholder=\"Enter a User name\" />\r\n\r\n\r\n                  </div>\r\n\r\n\r\n                  <div class=\"form-outline mb-3\">\r\n                  <label class=\"form-label\" for=\"form3Example3\">password</label>\r\n\r\n                    <input type=\"password\" id=\"form3Example4\" class=\"form-control form-control-lg\"\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      placeholder=\"Enter password\" />\r\n                      \r\n                  </div>\r\n\r\n                  <div class=\"text-center text-lg-start mt-4 pt-2\">\r\n                    <button type=\"button\" class=\"btn btn-primary btn-lg\"\r\n                      onClick={handleLogin}\r\n                    >Login</button>\r\n\r\n                    <p class=\"small fw-bold mt-2 pt-1 mb-0\">Don't have an account?</p>\r\n                    <Link className='text' to='/signup'>\r\n                      <a href=\"#!\"\r\n                        class=\"link-danger\">Register</a></Link>\r\n                  </div>\r\n\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            class=\"d-flex flex-column flex-md-row text-center text-md-start justify-content-between py-4 px-4 px-xl-5 bg-primary\">\r\n            Smartfix 4.0\r\n            <div class=\"text-white mb-3 mb-md-0\">\r\n              Copyright Â© 2023. All rights reserved.\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </section>\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Login;","D:\\smartfix project\\smartfixapplication\\src\\signup.js",["76","77"],[],"import React, { useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport logo from './smartfix.png';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Signup() {\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignup = () => {\r\n    if (!username || !email || !password) {\r\n      toast.error('Please fill in all the required fields.', { position: toast.POSITION.TOP_CENTER });\r\n      return;\r\n    }\r\n\r\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(?:\\.[a-zA-Z]{1,})?$/;\r\n    if (!emailRegex.test(email)) {\r\n      toast.error('Please enter a valid email address.', { position: toast.POSITION.TOP_CENTER });\r\n      return;\r\n    }\r\n\r\n    if (password.length < 6) {\r\n      toast.error('Password should be at least 6 characters long.', { position: toast.POSITION.TOP_CENTER });\r\n      return;\r\n    }\r\n\r\n    const userData = {\r\n      username: username,\r\n      email: email,\r\n      password: password,\r\n    };\r\n\r\n    axios\r\n      .post('http://localhost:3000/persons/signup', userData)\r\n      .then((response) => {\r\n        toast.success('User registered successfully!', {\r\n          position: toast.POSITION.TOP_CENTER,\r\n          autoClose: 500,\r\n          onClose: () => {\r\n            navigate('/login', { state: { loginSuccess: true } });\r\n          }\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        toast.error('Error occurred while registering user!', { position: toast.POSITION.TOP_CENTER });\r\n      });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setUsername('');\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n   \r\n\r\n    <div>\r\n      <section class=\"vh-100\" >\r\n        <div class=\"container h-100\">\r\n          <div class=\"row d-flex justify-content-center align-items-center h-100\">\r\n            <div class=\"col-lg-12 col-xl-11\">\r\n              <div class=\"si-card\">\r\n                <div class=\"card-body p-md-5\">\r\n                  <div class=\"row justify-content-center\">\r\n                    <div class=\"sign-card\">\r\n\r\n                      <p class=\"text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4\">Sign up</p>\r\n\r\n                      <form class=\"mx-1 mx-md-4\">\r\n\r\n                        <div class=\"d-flex flex-row align-items-center mb-4\">\r\n                          <i class=\"fas fa-user fa-lg me-3 fa-fw\"></i>\r\n                          <div class=\"form-outline flex-fill mb-0\">\r\n                          <label class=\"form-label\" for=\"form3Example1c\">Your Name</label>\r\n                            <input type=\"text\" id=\"form3Example1c\"\r\n                              value={username}\r\n                              required\r\n                              placeholder='Enter Your Name'\r\n                              onChange={(e) => setUsername(e.target.value.trim())}\r\n                              class=\"form-control\" />\r\n\r\n                            \r\n                          </div>\r\n                        </div>\r\n\r\n                        <div class=\"d-flex flex-row align-items-center mb-4\">\r\n                          <i class=\"fas fa-envelope fa-lg me-3 fa-fw\"></i>\r\n                          <div class=\"form-outline flex-fill mb-0\">\r\n                          <label class=\"form-label\" for=\"form3Example3c\">Your Email</label>\r\n                            <input type=\"email\" id=\"form3Example3c\"\r\n                              value={email}\r\n                              placeholder='Enter Your Email'\r\n                              onChange={(e) => setEmail(e.target.value.trim())}\r\n                              class=\"form-control\" />\r\n                           \r\n                          </div>\r\n                        </div>\r\n\r\n                        <div class=\"d-flex flex-row align-items-center mb-4\">\r\n                          <i class=\"fas fa-lock fa-lg me-3 fa-fw\"></i>\r\n                          <div class=\"form-outline flex-fill mb-0\">\r\n                          <label class=\"form-label\" for=\"form3Example4c\">Password</label>\r\n                            <input type=\"password\" id=\"form3Example4c\"\r\n                              value={password}\r\n                              placeholder='Enter Your Password'\r\n                              onChange={(e) => setPassword(e.target.value)}\r\n                              class=\"form-control\" />\r\n                            \r\n                          </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div class=\"d-flex justify-content-center mx-4 mb-3 mb-lg-4\">\r\n                          <button type=\"button\" class=\"btn btn-success btn-lg mr-2\"\r\n                          onClick={handleSignup}\r\n                          >Submit</button>\r\n                          <button type=\"button\" class=\"btn btn-danger btn-lg\"\r\n                          onClick={handleReset}\r\n                          >Reset</button>\r\n                        </div>\r\n\r\n\r\n\r\n                      </form>\r\n\r\n                    </div>\r\n                    <div class=\"col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2\">\r\n\r\n                      <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-registration/draw1.webp\"\r\n                        class=\"sign-image\" alt=\"Sample image\" />\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <ToastContainer position='top-center' /> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","D:\\smartfix project\\smartfixapplication\\src\\reportWebVitals.js",[],[],"D:\\smartfix project\\smartfixapplication\\src\\home.js",["78"],[],"import React, { useState } from 'react';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Home() {\r\n  const defaultFields = [\r\n    { field: '', type: '', required: false, range: { NumberMin: '', NumberMax: '' } },\r\n    \r\n  ];\r\n  \r\n\r\n  const navigate = useNavigate();\r\n  const [jobCardTemplates, setJobCardTemplates] = useState([]);\r\n  const [showTable, setShowTable] = useState(false);\r\n\r\n  const handleAddTemplate = () => {\r\n    setJobCardTemplates([{ templateName: '', fields: [...defaultFields] }]);\r\n  };\r\n  const handleSaveTemplate = (index) => {\r\n    const template = jobCardTemplates[index];\r\n  \r\n    // Check if the template name is filled\r\n    if (template.templateName.trim() === '') {\r\n      toast.error('Please enter a template name.', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return; // Stop execution if the template name is empty\r\n    }\r\n  \r\n    // Check if any required fields are empty\r\n    const hasEmptyFields = template.fields.some(\r\n      (field) => field.field === '' || field.type === ''\r\n    );\r\n  \r\n    if (hasEmptyFields) {\r\n      toast.error('Please fill in all required fields.', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return; // Stop execution if there are empty fields\r\n    }\r\n  \r\n    // Check if any range fields have min value greater than max value\r\n    const hasInvalidRange = template.fields.some((field) => {\r\n      if (field.type === 'number') {\r\n        const min = field.range.NumberMin ? Number(field.range.NumberMin) : Number.MIN_SAFE_INTEGER;\r\n        const max = field.range.NumberMax ? Number(field.range.NumberMax) : Number.MAX_SAFE_INTEGER;\r\n        return min > max || min === max;\r\n      } else if (field.type === 'date') {\r\n        const startDate = field.range.startDate ? new Date(field.range.startDate) : new Date(0);\r\n        const endDate = field.range.endDate ? new Date(field.range.endDate) : new Date();\r\n        return startDate > endDate || startDate === endDate;\r\n      }\r\n      return false;\r\n    });\r\n    \r\n  \r\n    if (hasInvalidRange) {\r\n      toast.error('Minimum value should be less than to maximum value.', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return; // Stop execution if there are invalid range values\r\n    }\r\n    \r\n  \r\n    const templateData = {\r\n      templateName: template.templateName,\r\n      fields: template.fields.map((field) => {\r\n        const fieldData = {\r\n          field: field.field,\r\n          type: field.type === 'date' ? 'date' : field.type,\r\n          required: field.required || false,\r\n        };\r\n  \r\n        if (field.type === 'number') {\r\n          fieldData.range = field.range;\r\n        } else if (field.type === 'date') {\r\n          fieldData.range = {\r\n            startDate: field.range.startDate,\r\n            endDate: field.range.endDate,\r\n          };\r\n        }\r\n  \r\n        return fieldData;\r\n      }),\r\n    };\r\n  \r\n    axios\r\n      .post('http://localhost:3000/home', templateData)\r\n      .then((response) => {\r\n        toast.success('Template saved successfully!', {\r\n          position: toast.POSITION.TOP_CENTER,\r\n          autoClose: 1000,\r\n          onClose: () => {\r\n            navigate('/display', { state: { loginSuccess: true } });\r\n          },\r\n        });\r\n        setShowTable(true);\r\n        setTimeout(() => {\r\n          setShowTable(false);\r\n          setJobCardTemplates([]);\r\n        }, 1000);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        toast.error('Error occurred while saving template! Try change your Template Name ', {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n      });\r\n  };\r\n  \r\n\r\n  const handleRemoveTemplate = (index) => {\r\n    const updatedTemplates = [...jobCardTemplates];\r\n    updatedTemplates.splice(index, 1);\r\n    setJobCardTemplates(updatedTemplates);\r\n  };\r\n\r\n  const handleResetFields = (index) => {\r\n    const updatedTemplates = [...jobCardTemplates];\r\n    updatedTemplates[index].fields = [...defaultFields];\r\n    setJobCardTemplates(updatedTemplates);\r\n  };\r\n  const handleDisplay = () => {\r\n    navigate('/display', { state: { loginSuccess: true } });\r\n  };\r\n  const jobCardTemplate = jobCardTemplates[0];\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container mt-4\">\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary-home\"\r\n            onClick={handleAddTemplate}\r\n          >\r\n            Create Job Card Template\r\n          </button>\r\n        </div>\r\n        <button className='template-table' onClick={handleDisplay} >\r\n          Show Templates\r\n        </button >\r\n      </div>\r\n\r\n      {jobCardTemplate && (\r\n        <div\r\n          className=\"card text-center\"\r\n          id={`exampleModalCenter-${0}`}\r\n          tabIndex=\"-1\"\r\n          role=\"dialog\"\r\n        >\r\n          <div className=\"card-header\" role=\"document\">\r\n            <div>\r\n              <div>\r\n                <h5 className=\"card-title\">Job Card Template</h5>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <form>\r\n                  <div className=\"card-text\">\r\n                    <label htmlFor={`templateName-${0}`} className=\"form-label\">\r\n                      Template Name\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control-home mx-auto\"\r\n                      placeholder=\"Enter template name\"\r\n                      value={jobCardTemplate.templateName}\r\n                      onChange={(e) => {\r\n                        const updatedTemplates = [...jobCardTemplates];\r\n                        updatedTemplates[0].templateName = e.target.value;\r\n                        setJobCardTemplates(updatedTemplates);\r\n                      }}\r\n                      style={{ width: '200px' }} // Adjust the width as needed\r\n                      id={`templateName-${0}`}\r\n                    />\r\n\r\n                    <label htmlFor={`fields-${0}`} className=\"form-label mt-3\">\r\n                      Fields\r\n                    </label>\r\n                    <table className=\"table table-bordered\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Field</th>\r\n                          <th>Type</th>\r\n                          <th>Range</th>\r\n                          <th>Required</th>\r\n                          <th>Actions</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {jobCardTemplate.fields.map((field, fieldIndex) => (\r\n                          <tr key={fieldIndex}>\r\n                            <td>\r\n                              <input\r\n                                type=\"text\"\r\n                                className=\"form-control-home\"\r\n                                placeholder=\"Field name\"\r\n                                value={field.field}\r\n                                onChange={(e) => {\r\n                                  const updatedTemplates = [...jobCardTemplates];\r\n                                  updatedTemplates[0].fields[fieldIndex].field =\r\n                                    e.target.value;\r\n                                  setJobCardTemplates(updatedTemplates);\r\n                                }}\r\n                              />\r\n                            </td>\r\n                            <td>\r\n                              <select\r\n                                className=\"form-select\"\r\n                                value={field.type}\r\n                                onChange={(e) => {\r\n                                  const updatedTemplates = [...jobCardTemplates];\r\n                                  updatedTemplates[0].fields[fieldIndex].type =\r\n                                    e.target.value;\r\n                                  setJobCardTemplates(updatedTemplates);\r\n                                }}\r\n                              >\r\n                                <option value=\"\" hidden>\r\n                                  -- Select --\r\n                                </option>\r\n                                <option value=\"text\">Text</option>\r\n                                <option value=\"date\">Date</option>\r\n                                <option value=\"number\">Number</option>\r\n                              </select>\r\n                            </td>\r\n                            {field.type === 'number' ? (\r\n                              <td>\r\n                                <div className=\"row\">\r\n                                  <div className=\"col\">\r\n                                    <input\r\n                                      type=\"number\"\r\n                                      className=\"form-control-home\"\r\n                                      placeholder=\"Min\"\r\n                                      value={field.range.NumberMin}\r\n                                      onChange={(e) => {\r\n                                        const updatedTemplates = [...jobCardTemplates];\r\n                                        updatedTemplates[0].fields[fieldIndex].range.NumberMin =\r\n                                          e.target.value;\r\n                                        setJobCardTemplates(updatedTemplates);\r\n                                      }}\r\n                                    />\r\n                                  </div>\r\n                                  <div className=\"col\">\r\n                                    <input\r\n                                      type=\"number\"\r\n                                      className=\"form-control-home\"\r\n                                      placeholder=\"Max\"\r\n                                      value={field.range.NumberMax}\r\n                                      onChange={(e) => {\r\n                                        const updatedTemplates = [...jobCardTemplates];\r\n                                        updatedTemplates[0].fields[fieldIndex].range.NumberMax =\r\n                                          e.target.value;\r\n                                        setJobCardTemplates(updatedTemplates);\r\n                                      }}\r\n                                    />\r\n                                  </div>\r\n                                </div>\r\n                              </td>\r\n                            ) : field.type === 'date' ? (\r\n                              <td>\r\n                                <div className=\"row\">\r\n                                  <div className=\"col\">\r\n                                    <input\r\n                                      type=\"date\"\r\n                                      className=\"form-control-home\"\r\n                                      value={field.range.startDate}\r\n                                      onChange={(e) => {\r\n                                        const updatedTemplates = [...jobCardTemplates];\r\n                                        updatedTemplates[0].fields[fieldIndex].range.startDate =\r\n                                          e.target.value;\r\n                                        setJobCardTemplates(updatedTemplates);\r\n                                      }}\r\n                                    />\r\n                                  </div>\r\n                                  <div className=\"col\">\r\n                                    <input\r\n                                      type=\"date\"\r\n                                      className=\"form-control-home\"\r\n                                      value={field.range.endDate}\r\n                                      onChange={(e) => {\r\n                                        const updatedTemplates = [...jobCardTemplates];\r\n                                        updatedTemplates[0].fields[fieldIndex].range.endDate =\r\n                                          e.target.value;\r\n                                        setJobCardTemplates(updatedTemplates);\r\n                                      }}\r\n                                    />\r\n                                  </div>\r\n                                </div>\r\n                              </td>\r\n                            ) : (\r\n                              <td></td>\r\n                            )}\r\n                            <td>\r\n                              <div className=\"form-check form-switch\">\r\n                                <input\r\n                                  className=\"form-check-input\"\r\n                                  type=\"checkbox\"\r\n                                  id={`required-${fieldIndex}`}\r\n                                  checked={field.required}\r\n                                  onChange={(e) => {\r\n                                    const updatedTemplates = [...jobCardTemplates];\r\n                                    updatedTemplates[0].fields[fieldIndex].required =\r\n                                      e.target.checked;\r\n                                    setJobCardTemplates(updatedTemplates);\r\n                                  }}\r\n                                />\r\n                                <label\r\n                                  className=\"form-check-label\"\r\n                                  htmlFor={`required-${fieldIndex}`}\r\n                                >\r\n                                  Required\r\n                                </label>\r\n                              </div>\r\n                            </td>\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-danger btn-sm\"\r\n                                onClick={() => {\r\n                                  const updatedTemplates = [...jobCardTemplates];\r\n                                  updatedTemplates[0].fields.splice(\r\n                                    fieldIndex,\r\n                                    1\r\n                                  );\r\n                                  setJobCardTemplates(updatedTemplates);\r\n                                }}\r\n                              >\r\n                                <FontAwesomeIcon icon={faTrash} />\r\n                              </button>\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                    <button\r\n                      className=\"btn btn-primary\"\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        const updatedTemplates = [...jobCardTemplates];\r\n                        updatedTemplates[0].fields.push({\r\n                          field: '',\r\n                          type: '',\r\n                          required: false,\r\n                          range: { NumberMin: '', NumberMax: '' ,startDate:'', endDate:'' },\r\n                          \r\n                          \r\n                        });\r\n                        setJobCardTemplates(updatedTemplates);\r\n                      }}\r\n                    >\r\n                      Add Field\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"card-footer text-muted\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-success\"\r\n                  onClick={() => handleSaveTemplate(0)}\r\n                >\r\n                  Save Template\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-warning ml-2\"\r\n                  onClick={() => handleResetFields(0)}\r\n                >\r\n                  Reset Fields\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-danger ml-2\"\r\n                  onClick={() => handleRemoveTemplate(0)}\r\n                >\r\n                  Remove Template\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","D:\\smartfix project\\smartfixapplication\\src\\display.js",["79","80"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faUpRightAndDownLeftFromCenter,\r\n  faPlus,\r\n  faEdit,\r\n  faSave,\r\n  faTrash,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport Home from './home';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst TemplateList = () => {\r\n  const [templateNames, setTemplateNames] = useState([]);\r\n  const [selectedTemplateName, setSelectedTemplateName] = useState(null);\r\n  const [templateFields, setTemplateFields] = useState([]);\r\n  const [editingFields, setEditingFields] = useState([]);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [isTableVisible, setIsTableVisible] = useState(true);\r\n\r\n\r\n  useEffect(() => {\r\n    fetchTemplateNames();\r\n\r\n    const interval = setInterval(fetchTemplateNames, 5000); // Refresh every 5 seconds\r\n\r\n    return () => {\r\n      clearInterval(interval); // Clear the interval on component unmount\r\n    };\r\n  }, []);\r\n\r\n  const fetchTemplateNames = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:3000/get');\r\n      setTemplateNames(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching template names:', error);\r\n    }\r\n  };\r\n\r\n  const handleTemplateNameClick = async (templateName) => {\r\n    setSelectedTemplateName(templateName);\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:3000/template/${templateName}`);\r\n      const { fields } = response.data;\r\n\r\n      const updatedFields = fields.map((field) => {\r\n        if (field.type === 'date') {\r\n          return {\r\n            ...field,\r\n            range: {\r\n              startDate: formatDate(field.range.startDate),\r\n              endDate: formatDate(field.range.endDate),\r\n            },\r\n          };\r\n        }\r\n        return field;\r\n      });\r\n\r\n      setTemplateFields(fields);\r\n      setEditingFields(updatedFields);\r\n      setIsEditing(false);\r\n      setIsTableVisible(true); // Show the table\r\n    } catch (error) {\r\n      console.error('Error fetching template fields:', error);\r\n    }\r\n  };\r\n\r\n  const handleEditClick = async () => {\r\n    setIsEditing(true);\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:3000/template/${selectedTemplateName}`);\r\n      const { fields } = response.data;\r\n      const updatedFields = fields.map((field) => {\r\n        if (field.type === 'date') {\r\n          return {\r\n            ...field,\r\n            range: {\r\n              ...field.range,\r\n              startDate: formatDate(field.range.startDate),\r\n              endDate: formatDate(field.range.endDate),\r\n            },\r\n          };\r\n        }\r\n        return field;\r\n      });\r\n\r\n      setEditingFields(updatedFields);\r\n    } catch (error) {\r\n      console.error('Error fetching template fields:', error);\r\n    }\r\n  };\r\n\r\n  const handleFieldChange = (index, field, value) => {\r\n    const updatedFields = [...editingFields];\r\n    updatedFields[index][field] = value;\r\n    setEditingFields(updatedFields);\r\n  };\r\n\r\n const handleSaveClick = async () => {\r\n  if (editingFields.length === 0) {\r\n    toast.error('At least one field is required');\r\n    return;\r\n  }\r\n\r\n  let isValid = true;\r\n  const errorMessages = [];\r\n\r\n  // Check for validation errors\r\n  editingFields.forEach((field, index) => {\r\n    if (field.type === 'number') {\r\n      const min = parseFloat(field.range.NumberMin);\r\n      const max = parseFloat(field.range.NumberMax);\r\n      if (min > max) {\r\n        isValid = false;\r\n        errorMessages.push(`Serial No ${index + 1}: Minimum value should be less than maximum value`);\r\n      }\r\n      //  else if (min === max) {\r\n      //   isValid = false;\r\n      //   errorMessages.push(`Serial No ${index + 1}: Minimum value should be less than maximum value`);\r\n      // }\r\n    } else if (field.type === 'date') {\r\n      const startDate = new Date(field.range.startDate);\r\n      const endDate = new Date(field.range.endDate);\r\n      if (startDate > endDate) {  \r\n        isValid = false;\r\n        errorMessages.push(`Serial No ${index + 1}: Start date should be less than end date`);\r\n      } else if (startDate.getTime() === endDate.getTime()) {\r\n        isValid = false;\r\n        errorMessages.push(`Serial No ${index + 1}: Start date should be less than end date`);\r\n      }\r\n    }\r\n  });\r\n\r\n  if (!isValid) {\r\n    errorMessages.forEach((message) => {\r\n      toast.error(message);\r\n    });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // Save template\r\n    await axios.put(`http://localhost:3000/template/${selectedTemplateName}`, {\r\n      fields: editingFields,\r\n    });\r\n    toast.success('Template updated successfully', { autoClose: 500 });\r\n    setIsEditing(false);\r\n    setTemplateFields([...editingFields]);\r\n    setIsTableVisible(false); \r\n  } catch (error) {\r\n    console.error('Error updating template:', error);\r\n    toast.error('Failed to update template');\r\n  }\r\n};\r\n\r\n  const handleAddField = () => {\r\n    const newField = {\r\n      field: '',\r\n      type: '',\r\n      required: false,\r\n      range: {\r\n        NumberMin: 0,\r\n        NumberMax: 0,\r\n        startDate: '',\r\n        endDate: '',\r\n      },\r\n    };\r\n    setEditingFields((prevFields) => [...prevFields, { ...newField }]);\r\n  };\r\n\r\n  const handleDeleteField = (index) => {\r\n    const updatedFields = [...editingFields];\r\n    updatedFields.splice(index, 1);\r\n    setEditingFields(updatedFields);\r\n  };\r\n\r\n  const handleToggleRequired = (index) => {\r\n    const updatedFields = [...editingFields];\r\n    updatedFields[index].required = !updatedFields[index].required;\r\n    setEditingFields(updatedFields);\r\n  };\r\n\r\n  const handleRangeChange = (index, field, value) => {\r\n    const updatedFields = [...editingFields];\r\n    updatedFields[index].range[field] = value;\r\n    setEditingFields(updatedFields);\r\n  };\r\n\r\n  const handleForm = () => {\r\n    navigate('/form', { state: { loginSuccess: true } });\r\n  };\r\n\r\n  \r\n  const formatDate = (dateString) => {\r\n    if (dateString === null) {\r\n      return ''; // Return empty string for null dates\r\n    }\r\n    const date = new Date(dateString);\r\n    const day = date.getDate().toString().padStart(2, '0');\r\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    const year = date.getFullYear().toString();\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  \r\n\r\n  const renderTemplateFields = () => {\r\n    if (selectedTemplateName && isTableVisible) {\r\n      return (\r\n        <div className=\"container mt-4\">\r\n          <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n            <h4>Template: {selectedTemplateName}</h4>\r\n            {isEditing ? (\r\n              <button className=\"btn btn-primary\" onClick={handleSaveClick}>\r\n                <FontAwesomeIcon icon={faSave} /> Save Template\r\n              </button>\r\n            ) : (\r\n              <FontAwesomeIcon icon={faEdit} onClick={handleEditClick} />\r\n            )}\r\n          </div>\r\n          <table className=\"display-table\">\r\n          <thead className=\"thead\">\r\n            <tr>\r\n              <th>Serial No.</th>\r\n              <th>Field</th>\r\n              <th>Type</th>\r\n              <th>Range</th>\r\n              <th>Required</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n            <tbody className=\"tbody\">\r\n              {isEditing ? (\r\n                editingFields.map((field, index) => (\r\n                  <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>\r\n                      <input\r\n                        type=\"text\"\r\n                        value={field.field}\r\n                        onChange={(e) => handleFieldChange(index, 'field', e.target.value)}\r\n                      />\r\n                    </td>\r\n\r\n                    <td>\r\n                      <select\r\n                        value={field.type}\r\n                        onChange={(e) => handleFieldChange(index, 'type', e.target.value)}\r\n                      >\r\n                        <option value=\"\" hidden>--Select--</option>\r\n                        <option value=\"text\">Text</option>\r\n                        <option value=\"number\">Number</option>\r\n                        <option value=\"date\">Date</option>\r\n                      </select>\r\n                    </td>\r\n\r\n                    <td>\r\n                      {field.type === 'number' && (\r\n                        <div>\r\n                          <label>Min:</label>\r\n                          <input\r\n                            type=\"number\"\r\n                            value={field.range.NumberMin}\r\n                            onChange={(e) =>\r\n                              handleRangeChange(index, 'NumberMin', e.target.value)\r\n                            }\r\n                          />\r\n                          <label>Max:</label>\r\n                          <input\r\n                            type=\"number\"\r\n                            value={field.range.NumberMax}\r\n                            onChange={(e) =>\r\n                              handleRangeChange(index, 'NumberMax', e.target.value)\r\n                            }\r\n                          />\r\n                        </div>\r\n                      )}\r\n                      {field.type === 'date' && (\r\n                        <div>\r\n                          <label>Start:</label>\r\n                          <input\r\n                            type=\"date\"\r\n                            value={formatDate(field.range.startDate)}\r\n                            onChange={(e) =>\r\n                              handleRangeChange(index, 'startDate', e.target.value)\r\n                            }\r\n                          />\r\n                          <label>End:</label>\r\n                          <input\r\n                            type=\"date\"\r\n                            value={formatDate(field.range.endDate)}\r\n                            onChange={(e) =>\r\n                              handleRangeChange(index, 'endDate', e.target.value)\r\n                            }\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </td>\r\n\r\n                    <td>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={field.required}\r\n                        onChange={() => handleToggleRequired(index)}\r\n                      />\r\n                    </td>\r\n\r\n                    <td>\r\n                      <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => handleDeleteField(index)}\r\n                      >\r\n                        <FontAwesomeIcon icon={faTrash} />\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                templateFields.map((field, index) => (\r\n                  <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{field.field}</td>\r\n                    <td>{field.type}</td>\r\n                    <td>\r\n                      {field.type === 'number'\r\n                        ? `Min: ${field.range.NumberMin}, Max: ${field.range.NumberMax}`\r\n                        : field.type === 'date'\r\n                        ? `Start: ${formatDate(field.range.startDate)}, End: ${formatDate(\r\n                            field.range.endDate\r\n                          )}`\r\n                        : ''}\r\n                    </td>\r\n                    <td>{field.required ? 'Clicked Required' : 'Un-Clicked Required'}</td>\r\n                    <td>\r\n                      <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => handleDeleteField(index)}\r\n                      >\r\n                        <FontAwesomeIcon icon={faTrash} />\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n          {isEditing && (\r\n            <button className=\"display-addfield\" onClick={handleAddField}>\r\n              Add Field\r\n            </button>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer />\r\n      <div>\r\n        <Home />\r\n        <div>\r\n          <button onClick={handleForm} type=\"button\" className=\"btn btn-warning\">\r\n            Form\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <h5 className=\"badge bg-secondary\">Template Names</h5>\r\n      <ol className=\"list-group list-group-numbered\">\r\n        {templateNames.map((template) => (\r\n          <li className=\"list-group-item d-flex justify-content-between align-items-start\" key={template._id}>\r\n            <div className=\"ms-2 me-auto\">\r\n              <div className=\"fw-bold\">\r\n                <span>{template.templateName}</span>\r\n              </div>\r\n            </div>\r\n            <span className=\"icon\" onClick={() => handleTemplateNameClick(template.templateName)}>\r\n              <div className=\"badge bg-primary rounded-pill\">\r\n                <FontAwesomeIcon icon={faUpRightAndDownLeftFromCenter} />\r\n              </div>\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n      {renderTemplateFields()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemplateList;","D:\\smartfix project\\smartfixapplication\\src\\form.js",["81","82","83","84","85"],[],"D:\\smartfix project\\smartfixapplication\\src\\formData.js",["86","87","88","89","90","91","92","93"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronUp, faChevronDown, faSearch, faSadTear } from '@fortawesome/free-solid-svg-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Button, Table, Pagination } from 'react-bootstrap';\r\n\r\n\r\nconst FormData = () => {\r\n  const [templates, setTemplates] = useState([]);\r\n  const [selectedTemplateName, setSelectedTemplateName] = useState('');\r\n  const [selectedTemplates, setSelectedTemplates] = useState([]);\r\n  const [showTable, setShowTable] = useState(false);\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [searchError, setSearchError] = useState(false);\r\n  const [sortedColumn, setSortedColumn] = useState(null);\r\n  const [sortOrder, setSortOrder] = useState('asc');\r\n  const navigate = useNavigate();\r\n  const [serialNumbers, setSerialNumbers] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 100;\r\n  const [searchName, setSearchName] = useState('');\r\n  const [templateNames, setTemplateNames] = useState([]);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [currentPageData, setCurrentPageData] = useState([]);\r\n  const [templateCounts, setTemplateCounts] = useState([]); // Initialize templateCounts state variable\r\n\r\n  useEffect(() => {\r\n    // Fetch template names and counts from the server\r\n    axios\r\n      .get('http://localhost:3000/templates')\r\n      .then((response) => {\r\n        const fetchedTemplates = response.data;\r\n        const names = fetchedTemplates.map((template) => template.templateName);\r\n        const counts = fetchedTemplates.map((template) => ({\r\n          templateName: template.templateName,\r\n          count: template.count,\r\n        }));\r\n        setTemplateNames(names);\r\n        setTemplateCounts(counts);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching template names and counts:', error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedTemplateName) {\r\n      const templateCount = templateCounts.find((template) => template.templateName === selectedTemplateName)?.count || 0;\r\n      const totalPages = Math.ceil(templateCount / itemsPerPage);\r\n      setTotalPages(totalPages);\r\n      fetchData(selectedTemplateName, currentPage, templateCount);\r\n    }\r\n  }, [selectedTemplateName, currentPage, templateCounts, totalPages]);\r\n\r\n  \r\nlet fetchedPages = [];\r\n\r\nconst fetchData = (templateName, page) => {\r\n  if (fetchedPages.includes(page)) {\r\n    // Page has already been fetched, do not make another request\r\n    return;\r\n  }\r\n\r\n  fetchedPages.push(page);\r\n\r\n  axios\r\n    .get(`http://localhost:3000/templates/${templateName}/${page}`)\r\n    .then((response) => {\r\n      const { templates, totalPages } = response.data;\r\n\r\n      // If the current page is greater than 1, concatenate the new templates with the existing ones\r\n      const updatedTemplates = page > 1 ? [...selectedTemplates, ...templates] : templates;\r\n\r\n      setTemplates(updatedTemplates);\r\n      setSelectedTemplates(updatedTemplates);\r\n      setShowTable(true);\r\n      setTotalPages(totalPages);\r\n      const serials = updatedTemplates.map((_, index) => index + 1);\r\n      setSerialNumbers(serials);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching template data:', error);\r\n    });\r\n};\r\n\r\n\r\n  const handleTemplateChange = (event) => {\r\n    setSelectedTemplateName(event.target.value);\r\n    setSearchValue('');\r\n    setSearchResult([]);\r\n    setSearchError(false);\r\n    setCurrentPage(1); // Reset pagination when template is changed\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n    fetchData(selectedTemplateName, page);\r\n  };\r\n\r\n  const getTemplateOptions = () => {\r\n    return templateCounts.map((template) => (\r\n      <option key={template.templateName} value={template.templateName}>\r\n        {template.templateName} ({template.count})\r\n      </option>\r\n    ));\r\n  };\r\n  \r\n\r\n  \r\n  const handleForm = () => {\r\n    navigate('/form', { state: { loginSuccess: true } });\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    const searchValueLowercase = searchValue.toLowerCase().trim();\r\n  \r\n    const filteredTemplates = selectedTemplates.filter((template) =>\r\n      template.fields.some((field) => {\r\n        const fieldValue = field.value.toString().toLowerCase();\r\n  \r\n        // Perform an exact match search\r\n        return fieldValue === searchValueLowercase;\r\n      })\r\n    );\r\n  \r\n    setSearchResult(filteredTemplates);\r\n    setSearchError(\r\n      searchValue.trim() !== \"\" &&\r\n      filteredTemplates.length === 0 &&\r\n      selectedTemplates.length > 0\r\n    );\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  const handleColumnClick = (column) => {\r\n    if (sortedColumn === column) {\r\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortedColumn(column);\r\n      setSortOrder('asc');\r\n    }\r\n  };\r\n\r\n  const sortRows = (rows) => {\r\n    if (!sortedColumn) {\r\n      return rows;\r\n    }\r\n\r\n    const sortedRows = [...rows];\r\n\r\n    sortedRows.sort((a, b) => {\r\n      let fieldA, fieldB;\r\n\r\n      if (sortedColumn === 'Serial No.') {\r\n        fieldA = serialNumbers[selectedTemplates.indexOf(a)];\r\n        fieldB = serialNumbers[selectedTemplates.indexOf(b)];\r\n      } else {\r\n        fieldA = a.fields.find((f) => f.field === sortedColumn)?.value;\r\n        fieldB = b.fields.find((f) => f.field === sortedColumn)?.value;\r\n      }\r\n\r\n      if (fieldA === undefined || fieldB === undefined) {\r\n        // Handle empty values\r\n        if (fieldA === undefined && fieldB === undefined) {\r\n          return 0; // Both values are empty, consider them equal\r\n        } else if (fieldA === undefined) {\r\n          return sortOrder === 'asc' ? 1 : -1; // Empty values come after non-empty values\r\n        } else {\r\n          return sortOrder === 'asc' ? -1 : 1; // Empty values come before non-empty values\r\n        }\r\n      }\r\n\r\n      if (!isNaN(fieldA) && !isNaN(fieldB)) {\r\n        // Both values are numeric\r\n        const numA = parseFloat(fieldA);\r\n        const numB = parseFloat(fieldB);\r\n\r\n        if (sortOrder === 'asc') {\r\n          return numA - numB;\r\n        } else {\r\n          return numB - numA;\r\n        }\r\n      } else {\r\n        // At least one value is non-numeric\r\n        if (sortOrder === 'asc') {\r\n          return fieldA.localeCompare(fieldB);\r\n        } else {\r\n          return fieldB.localeCompare(fieldA);\r\n        }\r\n      }\r\n    });\r\n\r\n    return sortedRows;\r\n  };\r\n\r\n  const renderTemplateTable = () => {\r\n    if (!selectedTemplates) {\r\n      return null;\r\n    }\r\n  \r\n    const templateFields = selectedTemplates.reduce((fields, template) => {\r\n      template.fields.forEach((field) => {\r\n        if (!fields.includes(field.field)) {\r\n          fields.push(field.field);\r\n        }\r\n      });\r\n      return fields;\r\n    }, []);\r\n\r\n    const rowsToShow = searchResult.length > 0 ? searchResult : selectedTemplates;\r\n    const sortedRows = sortRows(rowsToShow);\r\n\r\n    const renderSortArrow = (column) => {\r\n      if (sortedColumn === column) {\r\n        return (\r\n          <FontAwesomeIcon\r\n            icon={sortOrder === 'asc' ? faChevronUp : faChevronDown}\r\n            className=\"sort-arrow\"\r\n          />\r\n        );\r\n      }\r\n      return null;\r\n    };\r\n\r\n    // Pagination\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = sortedRows.slice(indexOfFirstItem, indexOfLastItem);\r\n    const renderPageNumbers = () => {\r\n      const templateCount =\r\n        templateCounts.find((template) => template.templateName === selectedTemplateName)?.count || 0;\r\n      const totalPages = Math.ceil(templateCount / itemsPerPage);\r\n      const maxPageNumbersToShow = 3;\r\n    \r\n      if (totalPages <= 1) {\r\n        return null; // If there is only one page or less, no need to render pagination\r\n      }\r\n    \r\n    \r\n      if (totalPages <= maxPageNumbersToShow) {\r\n        return (\r\n          <Pagination className=\"pagination\">\r\n            {Array.from({ length: totalPages }).map((_, index) => (\r\n              <Pagination.Item\r\n                key={index + 1}\r\n                active={currentPage === index + 1}\r\n                onClick={() => handlePageChange(index + 1)}\r\n              >\r\n                {index + 1}\r\n              </Pagination.Item>\r\n            ))}\r\n          </Pagination>\r\n        );\r\n      }\r\n    \r\n      const pageNumbersToShow = [];\r\n      const firstPageNumber = Math.max(currentPage - 1, 1);\r\n      const lastPageNumber = Math.min(firstPageNumber + maxPageNumbersToShow - 1, totalPages);\r\n    \r\n      for (let i = firstPageNumber; i <= lastPageNumber; i++) {\r\n        pageNumbersToShow.push(\r\n          <Pagination.Item\r\n            key={i}\r\n            active={currentPage === i}\r\n            onClick={() => handlePageChange(i)}\r\n          >\r\n            {i}\r\n          </Pagination.Item>\r\n        );\r\n      }\r\n    \r\n      return (\r\n        <Pagination className=\"pagination\">\r\n          {firstPageNumber > 1 && (\r\n            <Pagination.Prev onClick={() => handlePageChange(firstPageNumber - 1)} />\r\n          )}\r\n          {pageNumbersToShow}\r\n          {lastPageNumber < totalPages && (\r\n            <Pagination.Next onClick={() => handlePageChange(lastPageNumber + 1)} />\r\n          )}\r\n        </Pagination>\r\n      );\r\n    };\r\n    const handleSortClick = (column) => {\r\n      if (sortedColumn === column) {\r\n        setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n      } else {\r\n        setSortedColumn(column);\r\n        setSortOrder('asc');\r\n      }\r\n      setCurrentPage(1); // Reset to first page after sorting\r\n    \r\n      const sortedTemplates = sortRows(selectedTemplates); // Sort the templates based on the selected column and sort order\r\n      setSelectedTemplates(sortedTemplates); // Update the selected templates with the sorted order\r\n    };\r\n    \r\n\r\n    return (\r\n      <>\r\n        <div className=\"pagination-top-right\">{renderPageNumbers()}</div>\r\n        <Table className=\"center-table\" bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th onClick={() => handleSortClick('Serial No.')}>\r\n                Serial No.\r\n                {renderSortArrow('Serial No.')}\r\n              </th>\r\n              {templateFields.map((field) => (\r\n                <th key={field} onClick={() => handleSortClick(field)}>\r\n                  {field}\r\n                  {renderSortArrow(field)}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {currentItems.length > 0 ? (\r\n              currentItems.map((template, index) => (\r\n                <tr key={index}>\r\n                  <td>{serialNumbers[selectedTemplates.indexOf(template)]}</td>\r\n                  {templateFields.map((field) => {\r\n                    const fieldValue = template.fields.find((f) => f.field === field);\r\n                    return <td key={field}>{fieldValue ? fieldValue.value : ''}</td>;\r\n                  })}\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={templateFields.length + 1} className=\"text-center\">\r\n                  No templates found.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"button-8\" onClick={handleForm}>\r\n        Back\r\n      </Button>\r\n      <h2 className=\"Form-font\">Form collection</h2>\r\n\r\n      <Form.Group controlId=\"templateSelect\">\r\n        <label>Select a template:</label>\r\n        <Form.Control as=\"select\" onChange={handleTemplateChange}>\r\n          <option value=\"\" hidden>\r\n            --Form collection--\r\n          </option>\r\n          {getTemplateOptions()}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      {selectedTemplates.length > 0 && showTable && (\r\n        <div>\r\n          <div className=\"search-bar\">\r\n            <Form.Control\r\n              type=\"text\"\r\n              value={searchValue}\r\n              onChange={(event) => setSearchValue(event.target.value)}\r\n              placeholder=\"Search\"\r\n            />\r\n            <Button onClick={handleSearch}>\r\n              <FontAwesomeIcon icon={faSearch} />\r\n            </Button>\r\n          </div>\r\n          {searchError ? (\r\n            <div className=\"not-found\">\r\n              <FontAwesomeIcon icon={faSadTear} bounce className=\"sad-icon\" />\r\n              <p>User name not found</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"horizontal-tables\">\r\n              <div className=\"table-container\">{renderTemplateTable()}</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormData;\r\n","D:\\smartfix project\\smartfixapplication\\src\\random.js",[],[],"D:\\smartfix project\\smartfixapplication\\src\\chart.js",["94"],[],{"ruleId":"95","severity":1,"message":"96","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":13},{"ruleId":"95","severity":1,"message":"99","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":12},{"ruleId":"95","severity":1,"message":"100","line":4,"column":8,"nodeType":"97","messageId":"98","endLine":4,"endColumn":16},{"ruleId":"95","severity":1,"message":"101","line":5,"column":8,"nodeType":"97","messageId":"98","endLine":5,"endColumn":20},{"ruleId":"95","severity":1,"message":"102","line":6,"column":10,"nodeType":"97","messageId":"98","endLine":6,"endColumn":14},{"ruleId":"95","severity":1,"message":"103","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":16},{"ruleId":"95","severity":1,"message":"104","line":8,"column":8,"nodeType":"97","messageId":"98","endLine":8,"endColumn":27},{"ruleId":"95","severity":1,"message":"105","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":26},{"ruleId":"95","severity":1,"message":"106","line":4,"column":8,"nodeType":"97","messageId":"98","endLine":4,"endColumn":12},{"ruleId":"95","severity":1,"message":"107","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":13},{"ruleId":"95","severity":1,"message":"108","line":13,"column":9,"nodeType":"97","messageId":"98","endLine":13,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":62,"column":17,"nodeType":"111","endLine":63,"endColumn":58},{"ruleId":"95","severity":1,"message":"106","line":4,"column":8,"nodeType":"97","messageId":"98","endLine":4,"endColumn":12},{"ruleId":"109","severity":1,"message":"110","line":136,"column":23,"nodeType":"111","endLine":137,"endColumn":65},{"ruleId":"95","severity":1,"message":"112","line":18,"column":10,"nodeType":"97","messageId":"98","endLine":18,"endColumn":19},{"ruleId":"95","severity":1,"message":"113","line":6,"column":3,"nodeType":"97","messageId":"98","endLine":6,"endColumn":9},{"ruleId":"95","severity":1,"message":"114","line":14,"column":10,"nodeType":"97","messageId":"98","endLine":14,"endColumn":14},{"ruleId":"95","severity":1,"message":"114","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"115","line":4,"column":10,"nodeType":"97","messageId":"98","endLine":4,"endColumn":25},{"ruleId":"95","severity":1,"message":"116","line":5,"column":10,"nodeType":"97","messageId":"98","endLine":5,"endColumn":17},{"ruleId":"95","severity":1,"message":"117","line":155,"column":9,"nodeType":"97","messageId":"98","endLine":155,"endColumn":22},{"ruleId":"95","severity":1,"message":"118","line":161,"column":9,"nodeType":"97","messageId":"98","endLine":161,"endColumn":29},{"ruleId":"95","severity":1,"message":"119","line":10,"column":10,"nodeType":"97","messageId":"98","endLine":10,"endColumn":19},{"ruleId":"95","severity":1,"message":"120","line":23,"column":10,"nodeType":"97","messageId":"98","endLine":23,"endColumn":20},{"ruleId":"95","severity":1,"message":"121","line":23,"column":22,"nodeType":"97","messageId":"98","endLine":23,"endColumn":35},{"ruleId":"95","severity":1,"message":"122","line":24,"column":10,"nodeType":"97","messageId":"98","endLine":24,"endColumn":23},{"ruleId":"95","severity":1,"message":"123","line":26,"column":10,"nodeType":"97","messageId":"98","endLine":26,"endColumn":25},{"ruleId":"95","severity":1,"message":"124","line":26,"column":27,"nodeType":"97","messageId":"98","endLine":26,"endColumn":45},{"ruleId":"125","severity":1,"message":"126","line":55,"column":6,"nodeType":"127","endLine":55,"endColumn":69,"suggestions":"128"},{"ruleId":"95","severity":1,"message":"129","line":139,"column":9,"nodeType":"97","messageId":"98","endLine":139,"endColumn":26},{"ruleId":"95","severity":1,"message":"130","line":30,"column":10,"nodeType":"97","messageId":"98","endLine":30,"endColumn":22},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","'FormPage' is defined but never used.","'TemplateList' is defined but never used.","'Form' is defined but never used.","'FormData' is defined but never used.","'RandomFormGenerator' is defined but never used.","'useEffect' is defined but never used.","'logo' is defined but never used.","'login' is defined but never used.","'location' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donât need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'showTable' is assigned a value but never used.","'faPlus' is defined but never used.","'Link' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faTrash' is defined but never used.","'validateEmail' is assigned a value but never used.","'handleDeleteTemplate' is assigned a value but never used.","'templates' is assigned a value but never used.","'searchName' is assigned a value but never used.","'setSearchName' is assigned a value but never used.","'templateNames' is assigned a value but never used.","'currentPageData' is assigned a value but never used.","'setCurrentPageData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["131"],"'handleColumnClick' is assigned a value but never used.","'filteredData' is assigned a value but never used.",{"desc":"132","fix":"133"},"Update the dependencies array to be: [selectedTemplateName, currentPage, templateCounts, totalPages, fetchData]",{"range":"134","text":"135"},[2455,2518],"[selectedTemplateName, currentPage, templateCounts, totalPages, fetchData]"]