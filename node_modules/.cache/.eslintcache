[{"D:\\smartfix project\\smartfixapplication\\src\\index.js":"1","D:\\smartfix project\\smartfixapplication\\src\\App.js":"2","D:\\smartfix project\\smartfixapplication\\src\\login.js":"3","D:\\smartfix project\\smartfixapplication\\src\\signup.js":"4","D:\\smartfix project\\smartfixapplication\\src\\reportWebVitals.js":"5","D:\\smartfix project\\smartfixapplication\\src\\home.js":"6","D:\\smartfix project\\smartfixapplication\\src\\display.js":"7","D:\\smartfix project\\smartfixapplication\\src\\form.js":"8","D:\\smartfix project\\smartfixapplication\\src\\formData.js":"9","D:\\smartfix project\\smartfixapplication\\src\\random.js":"10"},{"size":948,"mtime":1687233945112,"results":"11","hashOfConfig":"12"},{"size":525,"mtime":1687233945098,"results":"13","hashOfConfig":"12"},{"size":4122,"mtime":1687233945113,"results":"14","hashOfConfig":"12"},{"size":5746,"mtime":1687233950351,"results":"15","hashOfConfig":"12"},{"size":375,"mtime":1687233950345,"results":"16","hashOfConfig":"12"},{"size":16439,"mtime":1687768040266,"results":"17","hashOfConfig":"12"},{"size":13533,"mtime":1688112287995,"results":"18","hashOfConfig":"12"},{"size":8937,"mtime":1689312540935,"results":"19","hashOfConfig":"12"},{"size":12904,"mtime":1689333861702,"results":"20","hashOfConfig":"12"},{"size":4731,"mtime":1689312930000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"xzmpom",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\smartfix project\\smartfixapplication\\src\\index.js",[],[],[],"D:\\smartfix project\\smartfixapplication\\src\\App.js",["57","58","59","60","61","62"],[],"import './App.css';\r\nimport Login from './login';\r\nimport Home from './home';\r\nimport FormPage from './form';\r\nimport TemplateList from './display';\r\nimport { Form } from 'react-router-dom';\r\nimport FormData from './formData'\r\nimport RandomFormGenerator from './random';\r\nfunction App() {\r\n  return (\r\n   <div>\r\n     {/* <Login /> */}\r\n     {/* < Home /> */}\r\n     {/* <TemplateList /> */}\r\n     {/* <FormPage />  */}\r\n     {/* <FormData/> */}\r\n     <RandomFormGenerator />\r\n     \r\n    </div>\r\n  );\r\n}\r\n \r\nexport default App;","D:\\smartfix project\\smartfixapplication\\src\\login.js",["63","64","65","66","67"],[],"import React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport logo from './smartfix.png';\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport login from './login.png';\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n\r\n  const handleLogin = () => {\r\n    if (!username || !password) {\r\n      toast.error('Please fill in all the required fields.', { position: toast.POSITION.TOP_CENTER });\r\n      return;\r\n    }\r\n\r\n    const userData = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    axios\r\n      .post('http://localhost:3000/persons/login', userData)\r\n      .then((response) => {\r\n        const success = response.data.success;\r\n\r\n        if (success) {\r\n          toast.success('Login successful!', {\r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 500,\r\n            onClose: () => {\r\n              navigate('/home', { state: { loginSuccess: true } });\r\n            }\r\n          });\r\n        } else {\r\n          toast.error('Invalid username or password', { position: toast.POSITION.TOP_CENTER });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        toast.error('Invalid username or password', { position: toast.POSITION.TOP_CENTER });\r\n      });\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div>\r\n\r\n\r\n        <section class=\"vh-100\">\r\n          <div class=\"container-fluid h-custom\">\r\n            <div class=\"row d-flex justify-content-center align-items-center h-100\">\r\n              <div class=\"col-md-9 col-lg-6 col-xl-5\">\r\n                <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp\"\r\n                  class=\"img-fluid\" alt=\"Sample image\" />\r\n              </div>\r\n              <div class=\"col-md-8 col-lg-6 col-xl-4 offset-xl-1\">\r\n                <form>\r\n                 \r\n                  <div class=\"divider d-flex align-items-center my-4\">\r\n                  <label class=\"form-label\" for=\"form3Example3\">LOGIN</label>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"form-outline mb-4\">\r\n                  <label class=\"form-label\" for=\"form3Example3\">Username</label>\r\n                    <input type=\"email\" id=\"form3Example3\" class=\"form-control form-control-lg\"\r\n                      onChange={(e) => setUsername(e.target.value.trim())}\r\n                      placeholder=\"Enter a User name\" />\r\n\r\n\r\n                  </div>\r\n\r\n\r\n                  <div class=\"form-outline mb-3\">\r\n                  <label class=\"form-label\" for=\"form3Example3\">password</label>\r\n\r\n                    <input type=\"password\" id=\"form3Example4\" class=\"form-control form-control-lg\"\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      placeholder=\"Enter password\" />\r\n                      \r\n                  </div>\r\n\r\n                  <div class=\"text-center text-lg-start mt-4 pt-2\">\r\n                    <button type=\"button\" class=\"btn btn-primary btn-lg\"\r\n                      onClick={handleLogin}\r\n                    >Login</button>\r\n\r\n                    <p class=\"small fw-bold mt-2 pt-1 mb-0\">Don't have an account?</p>\r\n                    <Link className='text' to='/signup'>\r\n                      <a href=\"#!\"\r\n                        class=\"link-danger\">Register</a></Link>\r\n                  </div>\r\n\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            class=\"d-flex flex-column flex-md-row text-center text-md-start justify-content-between py-4 px-4 px-xl-5 bg-primary\">\r\n            Smartfix 4.0\r\n            <div class=\"text-white mb-3 mb-md-0\">\r\n              Copyright Â© 2023. All rights reserved.\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </section>\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Login;","D:\\smartfix project\\smartfixapplication\\src\\signup.js",["68","69"],[],"import React, { useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport logo from './smartfix.png';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Signup() {\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignup = () => {\r\n    if (!username || !email || !password) {\r\n      toast.error('Please fill in all the required fields.', { position: toast.POSITION.TOP_CENTER });\r\n      return;\r\n    }\r\n\r\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(?:\\.[a-zA-Z]{1,})?$/;\r\n    if (!emailRegex.test(email)) {\r\n      toast.error('Please enter a valid email address.', { position: toast.POSITION.TOP_CENTER });\r\n      return;\r\n    }\r\n\r\n    if (password.length < 6) {\r\n      toast.error('Password should be at least 6 characters long.', { position: toast.POSITION.TOP_CENTER });\r\n      return;\r\n    }\r\n\r\n    const userData = {\r\n      username: username,\r\n      email: email,\r\n      password: password,\r\n    };\r\n\r\n    axios\r\n      .post('http://localhost:3000/persons/signup', userData)\r\n      .then((response) => {\r\n        toast.success('User registered successfully!', {\r\n          position: toast.POSITION.TOP_CENTER,\r\n          autoClose: 500,\r\n          onClose: () => {\r\n            navigate('/login', { state: { loginSuccess: true } });\r\n          }\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        toast.error('Error occurred while registering user!', { position: toast.POSITION.TOP_CENTER });\r\n      });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setUsername('');\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n   \r\n\r\n    <div>\r\n      <section class=\"vh-100\" >\r\n        <div class=\"container h-100\">\r\n          <div class=\"row d-flex justify-content-center align-items-center h-100\">\r\n            <div class=\"col-lg-12 col-xl-11\">\r\n              <div class=\"si-card\">\r\n                <div class=\"card-body p-md-5\">\r\n                  <div class=\"row justify-content-center\">\r\n                    <div class=\"sign-card\">\r\n\r\n                      <p class=\"text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4\">Sign up</p>\r\n\r\n                      <form class=\"mx-1 mx-md-4\">\r\n\r\n                        <div class=\"d-flex flex-row align-items-center mb-4\">\r\n                          <i class=\"fas fa-user fa-lg me-3 fa-fw\"></i>\r\n                          <div class=\"form-outline flex-fill mb-0\">\r\n                          <label class=\"form-label\" for=\"form3Example1c\">Your Name</label>\r\n                            <input type=\"text\" id=\"form3Example1c\"\r\n                              value={username}\r\n                              required\r\n                              placeholder='Enter Your Name'\r\n                              onChange={(e) => setUsername(e.target.value.trim())}\r\n                              class=\"form-control\" />\r\n\r\n                            \r\n                          </div>\r\n                        </div>\r\n\r\n                        <div class=\"d-flex flex-row align-items-center mb-4\">\r\n                          <i class=\"fas fa-envelope fa-lg me-3 fa-fw\"></i>\r\n                          <div class=\"form-outline flex-fill mb-0\">\r\n                          <label class=\"form-label\" for=\"form3Example3c\">Your Email</label>\r\n                            <input type=\"email\" id=\"form3Example3c\"\r\n                              value={email}\r\n                              placeholder='Enter Your Email'\r\n                              onChange={(e) => setEmail(e.target.value.trim())}\r\n                              class=\"form-control\" />\r\n                           \r\n                          </div>\r\n                        </div>\r\n\r\n                        <div class=\"d-flex flex-row align-items-center mb-4\">\r\n                          <i class=\"fas fa-lock fa-lg me-3 fa-fw\"></i>\r\n                          <div class=\"form-outline flex-fill mb-0\">\r\n                          <label class=\"form-label\" for=\"form3Example4c\">Password</label>\r\n                            <input type=\"password\" id=\"form3Example4c\"\r\n                              value={password}\r\n                              placeholder='Enter Your Password'\r\n                              onChange={(e) => setPassword(e.target.value)}\r\n                              class=\"form-control\" />\r\n                            \r\n                          </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div class=\"d-flex justify-content-center mx-4 mb-3 mb-lg-4\">\r\n                          <button type=\"button\" class=\"btn btn-success btn-lg mr-2\"\r\n                          onClick={handleSignup}\r\n                          >Submit</button>\r\n                          <button type=\"button\" class=\"btn btn-danger btn-lg\"\r\n                          onClick={handleReset}\r\n                          >Reset</button>\r\n                        </div>\r\n\r\n\r\n\r\n                      </form>\r\n\r\n                    </div>\r\n                    <div class=\"col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2\">\r\n\r\n                      <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-registration/draw1.webp\"\r\n                        class=\"sign-image\" alt=\"Sample image\" />\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <ToastContainer position='top-center' /> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","D:\\smartfix project\\smartfixapplication\\src\\reportWebVitals.js",[],[],"D:\\smartfix project\\smartfixapplication\\src\\home.js",["70"],[],"D:\\smartfix project\\smartfixapplication\\src\\display.js",["71","72"],[],"D:\\smartfix project\\smartfixapplication\\src\\form.js",["73","74","75","76","77"],[],"D:\\smartfix project\\smartfixapplication\\src\\formData.js",["78","79","80","81","82","83","84","85"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronUp, faChevronDown, faSearch, faSadTear } from '@fortawesome/free-solid-svg-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Button, Table, Pagination } from 'react-bootstrap';\r\n\r\n\r\nconst FormData = () => {\r\n  const [templates, setTemplates] = useState([]);\r\n  const [selectedTemplateName, setSelectedTemplateName] = useState('');\r\n  const [selectedTemplates, setSelectedTemplates] = useState([]);\r\n  const [showTable, setShowTable] = useState(false);\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [searchError, setSearchError] = useState(false);\r\n  const [sortedColumn, setSortedColumn] = useState(null);\r\n  const [sortOrder, setSortOrder] = useState('asc');\r\n  const navigate = useNavigate();\r\n  const [serialNumbers, setSerialNumbers] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 100;\r\n  const [searchName, setSearchName] = useState('');\r\n  const [templateNames, setTemplateNames] = useState([]);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [currentPageData, setCurrentPageData] = useState([]);\r\n  const [templateCounts, setTemplateCounts] = useState([]); // Initialize templateCounts state variable\r\n\r\n  useEffect(() => {\r\n    // Fetch template names and counts from the server\r\n    axios\r\n      .get('http://localhost:3000/templates')\r\n      .then((response) => {\r\n        const fetchedTemplates = response.data;\r\n        const names = fetchedTemplates.map((template) => template.templateName);\r\n        const counts = fetchedTemplates.map((template) => ({\r\n          templateName: template.templateName,\r\n          count: template.count,\r\n        }));\r\n        setTemplateNames(names);\r\n        setTemplateCounts(counts);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching template names and counts:', error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedTemplateName) {\r\n      const templateCount = templateCounts.find((template) => template.templateName === selectedTemplateName)?.count || 0;\r\n      const totalPages = Math.ceil(templateCount / itemsPerPage);\r\n      setTotalPages(totalPages);\r\n      fetchData(selectedTemplateName, currentPage, templateCount);\r\n    }\r\n  }, [selectedTemplateName, currentPage, templateCounts, totalPages]);\r\n\r\n  \r\nlet fetchedPages = [];\r\n\r\nconst fetchData = (templateName, page) => {\r\n  if (fetchedPages.includes(page)) {\r\n    // Page has already been fetched, do not make another request\r\n    return;\r\n  }\r\n\r\n  fetchedPages.push(page);\r\n\r\n  axios\r\n    .get(`http://localhost:3000/templates/${templateName}/${page}`)\r\n    .then((response) => {\r\n      const { templates, totalPages } = response.data;\r\n\r\n      // If the current page is greater than 1, concatenate the new templates with the existing ones\r\n      const updatedTemplates = page > 1 ? [...selectedTemplates, ...templates] : templates;\r\n\r\n      setTemplates(updatedTemplates);\r\n      setSelectedTemplates(updatedTemplates);\r\n      setShowTable(true);\r\n      setTotalPages(totalPages);\r\n      const serials = updatedTemplates.map((_, index) => index + 1);\r\n      setSerialNumbers(serials);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching template data:', error);\r\n    });\r\n};\r\n\r\n\r\n  const handleTemplateChange = (event) => {\r\n    setSelectedTemplateName(event.target.value);\r\n    setSearchValue('');\r\n    setSearchResult([]);\r\n    setSearchError(false);\r\n    setCurrentPage(1); // Reset pagination when template is changed\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n    fetchData(selectedTemplateName, page);\r\n  };\r\n\r\n  const getTemplateOptions = () => {\r\n    return templateCounts.map((template) => (\r\n      <option key={template.templateName} value={template.templateName}>\r\n        {template.templateName} ({template.count})\r\n      </option>\r\n    ));\r\n  };\r\n  \r\n\r\n  \r\n  const handleForm = () => {\r\n    navigate('/form', { state: { loginSuccess: true } });\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    const searchValueLowercase = searchValue.toLowerCase().trim();\r\n  \r\n    const filteredTemplates = selectedTemplates.filter((template) =>\r\n      template.fields.some((field) => {\r\n        const fieldValue = field.value.toString().toLowerCase();\r\n  \r\n        // Perform an exact match search\r\n        return fieldValue === searchValueLowercase;\r\n      })\r\n    );\r\n  \r\n    setSearchResult(filteredTemplates);\r\n    setSearchError(\r\n      searchValue.trim() !== \"\" &&\r\n      filteredTemplates.length === 0 &&\r\n      selectedTemplates.length > 0\r\n    );\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  const handleColumnClick = (column) => {\r\n    if (sortedColumn === column) {\r\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortedColumn(column);\r\n      setSortOrder('asc');\r\n    }\r\n  };\r\n\r\n  const sortRows = (rows) => {\r\n    if (!sortedColumn) {\r\n      return rows;\r\n    }\r\n\r\n    const sortedRows = [...rows];\r\n\r\n    sortedRows.sort((a, b) => {\r\n      let fieldA, fieldB;\r\n\r\n      if (sortedColumn === 'Serial No.') {\r\n        fieldA = serialNumbers[selectedTemplates.indexOf(a)];\r\n        fieldB = serialNumbers[selectedTemplates.indexOf(b)];\r\n      } else {\r\n        fieldA = a.fields.find((f) => f.field === sortedColumn)?.value;\r\n        fieldB = b.fields.find((f) => f.field === sortedColumn)?.value;\r\n      }\r\n\r\n      if (fieldA === undefined || fieldB === undefined) {\r\n        // Handle empty values\r\n        if (fieldA === undefined && fieldB === undefined) {\r\n          return 0; // Both values are empty, consider them equal\r\n        } else if (fieldA === undefined) {\r\n          return sortOrder === 'asc' ? 1 : -1; // Empty values come after non-empty values\r\n        } else {\r\n          return sortOrder === 'asc' ? -1 : 1; // Empty values come before non-empty values\r\n        }\r\n      }\r\n\r\n      if (!isNaN(fieldA) && !isNaN(fieldB)) {\r\n        // Both values are numeric\r\n        const numA = parseFloat(fieldA);\r\n        const numB = parseFloat(fieldB);\r\n\r\n        if (sortOrder === 'asc') {\r\n          return numA - numB;\r\n        } else {\r\n          return numB - numA;\r\n        }\r\n      } else {\r\n        // At least one value is non-numeric\r\n        if (sortOrder === 'asc') {\r\n          return fieldA.localeCompare(fieldB);\r\n        } else {\r\n          return fieldB.localeCompare(fieldA);\r\n        }\r\n      }\r\n    });\r\n\r\n    return sortedRows;\r\n  };\r\n\r\n  const renderTemplateTable = () => {\r\n    if (!selectedTemplates) {\r\n      return null;\r\n    }\r\n  \r\n    const templateFields = selectedTemplates.reduce((fields, template) => {\r\n      template.fields.forEach((field) => {\r\n        if (!fields.includes(field.field)) {\r\n          fields.push(field.field);\r\n        }\r\n      });\r\n      return fields;\r\n    }, []);\r\n\r\n    const rowsToShow = searchResult.length > 0 ? searchResult : selectedTemplates;\r\n    const sortedRows = sortRows(rowsToShow);\r\n\r\n    const renderSortArrow = (column) => {\r\n      if (sortedColumn === column) {\r\n        return (\r\n          <FontAwesomeIcon\r\n            icon={sortOrder === 'asc' ? faChevronUp : faChevronDown}\r\n            className=\"sort-arrow\"\r\n          />\r\n        );\r\n      }\r\n      return null;\r\n    };\r\n\r\n    // Pagination\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = sortedRows.slice(indexOfFirstItem, indexOfLastItem);\r\n    const renderPageNumbers = () => {\r\n      const templateCount =\r\n        templateCounts.find((template) => template.templateName === selectedTemplateName)?.count || 0;\r\n      const totalPages = Math.ceil(templateCount / itemsPerPage);\r\n      const maxPageNumbersToShow = 3;\r\n    \r\n      if (totalPages <= 1) {\r\n        return null; // If there is only one page or less, no need to render pagination\r\n      }\r\n    \r\n    \r\n      if (totalPages <= maxPageNumbersToShow) {\r\n        return (\r\n          <Pagination className=\"pagination\">\r\n            {Array.from({ length: totalPages }).map((_, index) => (\r\n              <Pagination.Item\r\n                key={index + 1}\r\n                active={currentPage === index + 1}\r\n                onClick={() => handlePageChange(index + 1)}\r\n              >\r\n                {index + 1}\r\n              </Pagination.Item>\r\n            ))}\r\n          </Pagination>\r\n        );\r\n      }\r\n    \r\n      const pageNumbersToShow = [];\r\n      const firstPageNumber = Math.max(currentPage - 1, 1);\r\n      const lastPageNumber = Math.min(firstPageNumber + maxPageNumbersToShow - 1, totalPages);\r\n    \r\n      for (let i = firstPageNumber; i <= lastPageNumber; i++) {\r\n        pageNumbersToShow.push(\r\n          <Pagination.Item\r\n            key={i}\r\n            active={currentPage === i}\r\n            onClick={() => handlePageChange(i)}\r\n          >\r\n            {i}\r\n          </Pagination.Item>\r\n        );\r\n      }\r\n    \r\n      return (\r\n        <Pagination className=\"pagination\">\r\n          {firstPageNumber > 1 && (\r\n            <Pagination.Prev onClick={() => handlePageChange(firstPageNumber - 1)} />\r\n          )}\r\n          {pageNumbersToShow}\r\n          {lastPageNumber < totalPages && (\r\n            <Pagination.Next onClick={() => handlePageChange(lastPageNumber + 1)} />\r\n          )}\r\n        </Pagination>\r\n      );\r\n    };\r\n    const handleSortClick = (column) => {\r\n      if (sortedColumn === column) {\r\n        setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n      } else {\r\n        setSortedColumn(column);\r\n        setSortOrder('asc');\r\n      }\r\n      setCurrentPage(1); // Reset to first page after sorting\r\n    \r\n      const sortedTemplates = sortRows(selectedTemplates); // Sort the templates based on the selected column and sort order\r\n      setSelectedTemplates(sortedTemplates); // Update the selected templates with the sorted order\r\n    };\r\n    \r\n\r\n    return (\r\n      <>\r\n        <div className=\"pagination-top-right\">{renderPageNumbers()}</div>\r\n        <Table className=\"center-table\" bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th onClick={() => handleSortClick('Serial No.')}>\r\n                Serial No.\r\n                {renderSortArrow('Serial No.')}\r\n              </th>\r\n              {templateFields.map((field) => (\r\n                <th key={field} onClick={() => handleSortClick(field)}>\r\n                  {field}\r\n                  {renderSortArrow(field)}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {currentItems.length > 0 ? (\r\n              currentItems.map((template, index) => (\r\n                <tr key={index}>\r\n                  <td>{serialNumbers[selectedTemplates.indexOf(template)]}</td>\r\n                  {templateFields.map((field) => {\r\n                    const fieldValue = template.fields.find((f) => f.field === field);\r\n                    return <td key={field}>{fieldValue ? fieldValue.value : ''}</td>;\r\n                  })}\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={templateFields.length + 1} className=\"text-center\">\r\n                  No templates found.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"button-8\" onClick={handleForm}>\r\n        Back\r\n      </Button>\r\n      <h2 className=\"Form-font\">Form collection</h2>\r\n\r\n      <Form.Group controlId=\"templateSelect\">\r\n        <label>Select a template:</label>\r\n        <Form.Control as=\"select\" onChange={handleTemplateChange}>\r\n          <option value=\"\" hidden>\r\n            --Form collection--\r\n          </option>\r\n          {getTemplateOptions()}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      {selectedTemplates.length > 0 && showTable && (\r\n        <div>\r\n          <div className=\"search-bar\">\r\n            <Form.Control\r\n              type=\"text\"\r\n              value={searchValue}\r\n              onChange={(event) => setSearchValue(event.target.value)}\r\n              placeholder=\"Search\"\r\n            />\r\n            <Button onClick={handleSearch}>\r\n              <FontAwesomeIcon icon={faSearch} />\r\n            </Button>\r\n          </div>\r\n          {searchError ? (\r\n            <div className=\"not-found\">\r\n              <FontAwesomeIcon icon={faSadTear} bounce className=\"sad-icon\" />\r\n              <p>User name not found</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"horizontal-tables\">\r\n              <div className=\"table-container\">{renderTemplateTable()}</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormData;\r\n","D:\\smartfix project\\smartfixapplication\\src\\random.js",[],[],{"ruleId":"86","severity":1,"message":"87","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":13},{"ruleId":"86","severity":1,"message":"90","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":12},{"ruleId":"86","severity":1,"message":"91","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":16},{"ruleId":"86","severity":1,"message":"92","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":20},{"ruleId":"86","severity":1,"message":"93","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":14},{"ruleId":"86","severity":1,"message":"94","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":16},{"ruleId":"86","severity":1,"message":"95","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"96","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":12},{"ruleId":"86","severity":1,"message":"97","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":13},{"ruleId":"86","severity":1,"message":"98","line":13,"column":9,"nodeType":"88","messageId":"89","endLine":13,"endColumn":17},{"ruleId":"99","severity":1,"message":"100","line":62,"column":17,"nodeType":"101","endLine":63,"endColumn":58},{"ruleId":"86","severity":1,"message":"96","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":12},{"ruleId":"99","severity":1,"message":"100","line":136,"column":23,"nodeType":"101","endLine":137,"endColumn":65},{"ruleId":"86","severity":1,"message":"102","line":18,"column":10,"nodeType":"88","messageId":"89","endLine":18,"endColumn":19},{"ruleId":"86","severity":1,"message":"103","line":6,"column":3,"nodeType":"88","messageId":"89","endLine":6,"endColumn":9},{"ruleId":"86","severity":1,"message":"104","line":14,"column":10,"nodeType":"88","messageId":"89","endLine":14,"endColumn":14},{"ruleId":"86","severity":1,"message":"104","line":3,"column":10,"nodeType":"88","messageId":"89","endLine":3,"endColumn":14},{"ruleId":"86","severity":1,"message":"105","line":4,"column":10,"nodeType":"88","messageId":"89","endLine":4,"endColumn":25},{"ruleId":"86","severity":1,"message":"106","line":5,"column":10,"nodeType":"88","messageId":"89","endLine":5,"endColumn":17},{"ruleId":"86","severity":1,"message":"107","line":141,"column":9,"nodeType":"88","messageId":"89","endLine":141,"endColumn":22},{"ruleId":"86","severity":1,"message":"108","line":147,"column":9,"nodeType":"88","messageId":"89","endLine":147,"endColumn":29},{"ruleId":"86","severity":1,"message":"109","line":10,"column":10,"nodeType":"88","messageId":"89","endLine":10,"endColumn":19},{"ruleId":"86","severity":1,"message":"110","line":23,"column":10,"nodeType":"88","messageId":"89","endLine":23,"endColumn":20},{"ruleId":"86","severity":1,"message":"111","line":23,"column":22,"nodeType":"88","messageId":"89","endLine":23,"endColumn":35},{"ruleId":"86","severity":1,"message":"112","line":24,"column":10,"nodeType":"88","messageId":"89","endLine":24,"endColumn":23},{"ruleId":"86","severity":1,"message":"113","line":26,"column":10,"nodeType":"88","messageId":"89","endLine":26,"endColumn":25},{"ruleId":"86","severity":1,"message":"114","line":26,"column":27,"nodeType":"88","messageId":"89","endLine":26,"endColumn":45},{"ruleId":"115","severity":1,"message":"116","line":55,"column":6,"nodeType":"117","endLine":55,"endColumn":69,"suggestions":"118"},{"ruleId":"86","severity":1,"message":"119","line":139,"column":9,"nodeType":"88","messageId":"89","endLine":139,"endColumn":26},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","'FormPage' is defined but never used.","'TemplateList' is defined but never used.","'Form' is defined but never used.","'FormData' is defined but never used.","'useEffect' is defined but never used.","'logo' is defined but never used.","'login' is defined but never used.","'location' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donât need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'showTable' is assigned a value but never used.","'faPlus' is defined but never used.","'Link' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faTrash' is defined but never used.","'validateEmail' is assigned a value but never used.","'handleDeleteTemplate' is assigned a value but never used.","'templates' is assigned a value but never used.","'searchName' is assigned a value but never used.","'setSearchName' is assigned a value but never used.","'templateNames' is assigned a value but never used.","'currentPageData' is assigned a value but never used.","'setCurrentPageData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["120"],"'handleColumnClick' is assigned a value but never used.",{"desc":"121","fix":"122"},"Update the dependencies array to be: [selectedTemplateName, currentPage, templateCounts, totalPages, fetchData]",{"range":"123","text":"124"},[2455,2518],"[selectedTemplateName, currentPage, templateCounts, totalPages, fetchData]"]