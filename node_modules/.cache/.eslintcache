[{"D:\\git hub folder\\smartfixapplication\\src\\index.js":"1","D:\\git hub folder\\smartfixapplication\\src\\reportWebVitals.js":"2","D:\\git hub folder\\smartfixapplication\\src\\App.js":"3","D:\\git hub folder\\smartfixapplication\\src\\login.js":"4","D:\\git hub folder\\smartfixapplication\\src\\signup.js":"5","D:\\git hub folder\\smartfixapplication\\src\\home.js":"6","D:\\git hub folder\\smartfixapplication\\src\\display.js":"7","D:\\git hub folder\\smartfixapplication\\src\\form.js":"8"},{"size":859,"mtime":1685618887022,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1684840946006,"results":"11","hashOfConfig":"10"},{"size":381,"mtime":1685618523248,"results":"12","hashOfConfig":"10"},{"size":4122,"mtime":1685956495835,"results":"13","hashOfConfig":"10"},{"size":5746,"mtime":1686025485270,"results":"14","hashOfConfig":"10"},{"size":9176,"mtime":1685857636883,"results":"15","hashOfConfig":"10"},{"size":6773,"mtime":1686025554917,"results":"16","hashOfConfig":"10"},{"size":7796,"mtime":1686032621164,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1vrl18m",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\git hub folder\\smartfixapplication\\src\\index.js",[],[],[],"D:\\git hub folder\\smartfixapplication\\src\\reportWebVitals.js",[],[],"D:\\git hub folder\\smartfixapplication\\src\\App.js",["46","47","48","49"],[],"import './App.css';\r\nimport Login from './login';\r\nimport Home from './home';\r\nimport FormPage from './form';\r\nimport TemplateList from './display';\r\nimport { Form } from 'react-router-dom';\r\nfunction App() {\r\n  return (\r\n   <div>\r\n     {/* <Login /> */}\r\n     < Home />\r\n     {/* <TemplateList /> */}\r\n     {/* <FormPage />  */}\r\n     \r\n    </div>\r\n  );\r\n}\r\n \r\nexport default App;","D:\\git hub folder\\smartfixapplication\\src\\login.js",["50","51","52","53","54"],[],"import React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport logo from './smartfix.png';\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport login from './login.png';\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n\r\n  const handleLogin = () => {\r\n    if (!username || !password) {\r\n      toast.error('Please fill in all the required fields.', { position: toast.POSITION.TOP_CENTER });\r\n      return;\r\n    }\r\n\r\n    const userData = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    axios\r\n      .post('http://localhost:3000/persons/login', userData)\r\n      .then((response) => {\r\n        const success = response.data.success;\r\n\r\n        if (success) {\r\n          toast.success('Login successful!', {\r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 500,\r\n            onClose: () => {\r\n              navigate('/home', { state: { loginSuccess: true } });\r\n            }\r\n          });\r\n        } else {\r\n          toast.error('Invalid username or password', { position: toast.POSITION.TOP_CENTER });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        toast.error('Invalid username or password', { position: toast.POSITION.TOP_CENTER });\r\n      });\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div>\r\n\r\n\r\n        <section class=\"vh-100\">\r\n          <div class=\"container-fluid h-custom\">\r\n            <div class=\"row d-flex justify-content-center align-items-center h-100\">\r\n              <div class=\"col-md-9 col-lg-6 col-xl-5\">\r\n                <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp\"\r\n                  class=\"img-fluid\" alt=\"Sample image\" />\r\n              </div>\r\n              <div class=\"col-md-8 col-lg-6 col-xl-4 offset-xl-1\">\r\n                <form>\r\n                 \r\n                  <div class=\"divider d-flex align-items-center my-4\">\r\n                  <label class=\"form-label\" for=\"form3Example3\">LOGIN</label>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"form-outline mb-4\">\r\n                  <label class=\"form-label\" for=\"form3Example3\">Username</label>\r\n                    <input type=\"email\" id=\"form3Example3\" class=\"form-control form-control-lg\"\r\n                      onChange={(e) => setUsername(e.target.value.trim())}\r\n                      placeholder=\"Enter a User name\" />\r\n\r\n\r\n                  </div>\r\n\r\n\r\n                  <div class=\"form-outline mb-3\">\r\n                  <label class=\"form-label\" for=\"form3Example3\">password</label>\r\n\r\n                    <input type=\"password\" id=\"form3Example4\" class=\"form-control form-control-lg\"\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      placeholder=\"Enter password\" />\r\n                      \r\n                  </div>\r\n\r\n                  <div class=\"text-center text-lg-start mt-4 pt-2\">\r\n                    <button type=\"button\" class=\"btn btn-primary btn-lg\"\r\n                      onClick={handleLogin}\r\n                    >Login</button>\r\n\r\n                    <p class=\"small fw-bold mt-2 pt-1 mb-0\">Don't have an account?</p>\r\n                    <Link className='text' to='/signup'>\r\n                      <a href=\"#!\"\r\n                        class=\"link-danger\">Register</a></Link>\r\n                  </div>\r\n\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            class=\"d-flex flex-column flex-md-row text-center text-md-start justify-content-between py-4 px-4 px-xl-5 bg-primary\">\r\n            Smartfix 4.0\r\n            <div class=\"text-white mb-3 mb-md-0\">\r\n              Copyright Â© 2023. All rights reserved.\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </section>\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Login;","D:\\git hub folder\\smartfixapplication\\src\\signup.js",["55","56"],[],"D:\\git hub folder\\smartfixapplication\\src\\home.js",["57"],[],"import React, { useState } from 'react';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Home() {\r\n  const defaultFields = [{ field: '', type: '' }];\r\n\r\n  const navigate = useNavigate();\r\n  const [jobCardTemplates, setJobCardTemplates] = useState([]);\r\n  const [showTable, setShowTable] = useState(false);\r\n\r\n  const handleAddTemplate = () => {\r\n    setJobCardTemplates([{ templateName: '', fields: [...defaultFields] }]);\r\n  };\r\n\r\n  const handleSaveTemplate = (index) => {\r\n    const template = jobCardTemplates[index];\r\n\r\n    // Check if the template name is filled\r\n    if (template.templateName.trim() === '') {\r\n      toast.error('Please enter a template name.', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return; // Stop execution if the template name is empty\r\n    }\r\n\r\n    // Check if any required fields are empty\r\n    const hasEmptyFields = template.fields.some(\r\n      (field) => field.field === '' || field.type === ''\r\n    );\r\n\r\n    if (hasEmptyFields) {\r\n      toast.error('Please fill in all required fields.', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return; // Stop execution if there are empty fields\r\n    }\r\n\r\n    const templateData = {\r\n      templateName: template.templateName,\r\n      fields: template.fields.map((field) => ({\r\n        field: field.field,\r\n        type: field.type,\r\n      })),\r\n    };\r\n\r\n    axios\r\n      .post('http://localhost:3000/home', templateData)\r\n      .then((response) => {\r\n        toast.success('Template saved successfully!', {\r\n          position: toast.POSITION.TOP_CENTER,\r\n          autoClose: 1000,\r\n          onClose: () => {\r\n            navigate('/display', { state: { loginSuccess: true } });\r\n          },\r\n        });\r\n        setShowTable(true);\r\n        setTimeout(() => {\r\n          setShowTable(false);\r\n          setJobCardTemplates([]);\r\n        }, 1000);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        toast.error('Error occurred while saving template!', {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleRemoveTemplate = (index) => {\r\n    const updatedTemplates = [...jobCardTemplates];\r\n    updatedTemplates.splice(index, 1);\r\n    setJobCardTemplates(updatedTemplates);\r\n  };\r\n\r\n  const handleResetFields = (index) => {\r\n    const updatedTemplates = [...jobCardTemplates];\r\n    updatedTemplates[index].fields = [...defaultFields];\r\n    setJobCardTemplates(updatedTemplates);\r\n  };\r\n\r\n  const jobCardTemplate = jobCardTemplates[0];\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container mt-4\">\r\n        <div >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={handleAddTemplate}\r\n          >\r\n            Create Job Card Template\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {jobCardTemplate && (\r\n        <div\r\n          className=\"card text-center\"\r\n          id={`exampleModalCenter-${0}`}\r\n          tabIndex=\"-1\"\r\n          role=\"dialog\"\r\n        >\r\n          <div className=\"card-header\" role=\"document\">\r\n            <div>\r\n              <div>\r\n                <h5 className=\"card-title\">Job Card Template</h5>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <form>\r\n                  <div className=\"card-text\">\r\n                    <label htmlFor={`templateName-${0}`} className=\"form-label\">\r\n                      Template Name\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control mx-auto\"\r\n                      placeholder=\"Enter template name\"\r\n                      value={jobCardTemplate.templateName}\r\n                      onChange={(e) => {\r\n                        const updatedTemplates = [...jobCardTemplates];\r\n                        updatedTemplates[0].templateName = e.target.value;\r\n                        setJobCardTemplates(updatedTemplates);\r\n                      }}\r\n                      style={{ width: '200px' }} // Adjust the width as needed\r\n                      id={`templateName-${0}`}\r\n                    />\r\n\r\n                    <label htmlFor={`fields-${0}`} className=\"form-label mt-3\">\r\n                      Fields\r\n                    </label>\r\n                    <table className=\"table table-bordered\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Field</th>\r\n                          <th>Type</th>\r\n                          <th>Actions</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {jobCardTemplate.fields.map((field, fieldIndex) => (\r\n                          <tr key={fieldIndex}>\r\n                            <td>\r\n                              <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Field name\"\r\n                                value={field.field}\r\n                                onChange={(e) => {\r\n                                  const updatedTemplates = [...jobCardTemplates];\r\n                                  updatedTemplates[0].fields[fieldIndex].field =\r\n                                    e.target.value;\r\n                                  setJobCardTemplates(updatedTemplates);\r\n                                }}\r\n                              />\r\n                            </td>\r\n                            <td>\r\n                              <select\r\n                                className=\"form-select\"\r\n                                value={field.type}\r\n                                onChange={(e) => {\r\n                                  const updatedTemplates = [...jobCardTemplates];\r\n                                  updatedTemplates[0].fields[fieldIndex].type =\r\n                                    e.target.value;\r\n                                  setJobCardTemplates(updatedTemplates);\r\n                                }}\r\n                              >\r\n                                <option value=\"\" hidden>\r\n                                  -- Select --\r\n                                </option>\r\n                                <option value=\"text\">Text</option>\r\n                                <option value=\"email\">Date</option>\r\n                                <option value=\"number\">Number</option>\r\n                              </select>\r\n                            </td>\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-danger btn-sm\"\r\n                                onClick={() => {\r\n                                  const updatedTemplates = [...jobCardTemplates];\r\n                                  updatedTemplates[0].fields.splice(fieldIndex, 1);\r\n                                  setJobCardTemplates(updatedTemplates);\r\n                                }}\r\n                              >\r\n                                <FontAwesomeIcon icon={faTrash} />\r\n                              </button>\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                    <button\r\n                      className=\"btn btn-primary\"\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        const updatedTemplates = [...jobCardTemplates];\r\n                        updatedTemplates[0].fields.push({ field: '', type: '' });\r\n                        setJobCardTemplates(updatedTemplates);\r\n                      }}\r\n                    >\r\n                      Add Field\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-danger\"\r\n                  onClick={() => handleRemoveTemplate(0)}\r\n                >\r\n                  Remove Template\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  onClick={() => handleResetFields(0)}\r\n                >\r\n                  Reset Fields\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-success\"\r\n                  onClick={() => handleSaveTemplate(0)}\r\n                  disabled={jobCardTemplate.fields.length === 0}\r\n                >\r\n                  Save Template\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","D:\\git hub folder\\smartfixapplication\\src\\display.js",["58","59"],[],"D:\\git hub folder\\smartfixapplication\\src\\form.js",["60","61","62","63"],[],{"ruleId":"64","severity":1,"message":"65","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":13},{"ruleId":"64","severity":1,"message":"68","line":4,"column":8,"nodeType":"66","messageId":"67","endLine":4,"endColumn":16},{"ruleId":"64","severity":1,"message":"69","line":5,"column":8,"nodeType":"66","messageId":"67","endLine":5,"endColumn":20},{"ruleId":"64","severity":1,"message":"70","line":6,"column":10,"nodeType":"66","messageId":"67","endLine":6,"endColumn":14},{"ruleId":"64","severity":1,"message":"71","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":26},{"ruleId":"64","severity":1,"message":"72","line":4,"column":8,"nodeType":"66","messageId":"67","endLine":4,"endColumn":12},{"ruleId":"64","severity":1,"message":"73","line":7,"column":8,"nodeType":"66","messageId":"67","endLine":7,"endColumn":13},{"ruleId":"64","severity":1,"message":"74","line":13,"column":9,"nodeType":"66","messageId":"67","endLine":13,"endColumn":17},{"ruleId":"75","severity":1,"message":"76","line":62,"column":17,"nodeType":"77","endLine":63,"endColumn":58},{"ruleId":"64","severity":1,"message":"72","line":4,"column":8,"nodeType":"66","messageId":"67","endLine":4,"endColumn":12},{"ruleId":"75","severity":1,"message":"76","line":136,"column":23,"nodeType":"77","endLine":137,"endColumn":65},{"ruleId":"64","severity":1,"message":"78","line":14,"column":10,"nodeType":"66","messageId":"67","endLine":14,"endColumn":19},{"ruleId":"64","severity":1,"message":"79","line":4,"column":42,"nodeType":"66","messageId":"67","endLine":4,"endColumn":48},{"ruleId":"64","severity":1,"message":"80","line":8,"column":10,"nodeType":"66","messageId":"67","endLine":8,"endColumn":14},{"ruleId":"64","severity":1,"message":"80","line":3,"column":10,"nodeType":"66","messageId":"67","endLine":3,"endColumn":14},{"ruleId":"64","severity":1,"message":"81","line":4,"column":10,"nodeType":"66","messageId":"67","endLine":4,"endColumn":25},{"ruleId":"64","severity":1,"message":"82","line":5,"column":10,"nodeType":"66","messageId":"67","endLine":5,"endColumn":17},{"ruleId":"64","severity":1,"message":"83","line":109,"column":9,"nodeType":"66","messageId":"67","endLine":109,"endColumn":29},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'FormPage' is defined but never used.","'TemplateList' is defined but never used.","'Form' is defined but never used.","'useEffect' is defined but never used.","'logo' is defined but never used.","'login' is defined but never used.","'location' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donât need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'showTable' is assigned a value but never used.","'faPlus' is defined but never used.","'Link' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faTrash' is defined but never used.","'handleDeleteTemplate' is assigned a value but never used."]